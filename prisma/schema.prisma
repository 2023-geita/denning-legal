// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ATTORNEY
  PARALEGAL
  STAFF
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            UserRole  @default(ATTORNEY)
  active          Boolean   @default(true)
  lastLogin       DateTime?
  resetToken      String?
  resetTokenExpiry DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  profile         UserProfile?
  matters         Matter[]
  sessions        Session[]
}

model UserProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  phoneNumber String?
  position    String?
  department  String?
  avatar      String?
  bio         String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Matter {
  id                 String    @id @default(cuid())
  name               String
  client             String
  status             String
  notes              String?
  originatingAttorney String
  responsibleAttorney String
  courtLocation      String
  practiceArea       String
  caseNumber         String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deadlines          MatterDeadline[]
  documents          MatterDocument[]
  subscribedAttorneys SubscribedAttorney[]
  assignedUsers      User[]
  billableSessions   BillableSession[]
  tasks              Task[]
}

model MatterDeadline {
  id                   String   @id @default(cuid())
  matterId             String
  matterOpens          DateTime
  matterCloses         DateTime
  matterDue            DateTime
  statuteOfLimitations DateTime
  matter               Matter   @relation(fields: [matterId], references: [id], onDelete: Cascade)
}

model SubscribedAttorney {
  id           String @id @default(cuid())
  matterId     String
  attorneyName String
  matter       Matter @relation(fields: [matterId], references: [id], onDelete: Cascade)
}

model MatterDocument {
  id         String   @id @default(cuid())
  matterId   String
  name       String
  url        String
  type       String
  uploadedAt DateTime
  matter     Matter   @relation(fields: [matterId], references: [id], onDelete: Cascade)
}

model Document {
  id           String   @id @default(cuid())
  name         String
  type         String
  status       String
  matterId     String
  matterName   String
  uploadedBy   String
  uploadedAt   DateTime @default(now())
  lastModified DateTime @updatedAt
  fileUrl      String
  fileSize     Int
  tags         String[]
  versions     DocumentVersion[]
}

model DocumentVersion {
  id         String   @id @default(cuid())
  documentId String
  version    Int
  uploadedBy String
  uploadedAt DateTime @default(now())
  fileUrl    String
  fileSize   Int
  changes    String?
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Task {
  id              String   @id @default(cuid())
  name            String
  matterId        String
  matterName      String
  description     String?
  dueDate         DateTime
  assignedAttorney String
  status          String
  priority        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  reminder        Boolean  @default(false)
  reminderDate    DateTime?
  matter          Matter   @relation(fields: [matterId], references: [id], onDelete: Cascade)
}

model BillableSession {
  id          String   @id @default(cuid())
  matterId    String
  matterName  String
  startTime   DateTime
  endTime     DateTime?
  duration    Int
  notes       String?
  attorney    String
  billingRate Float
  date        DateTime
  status      String
  billable    Boolean  @default(true)
  matter      Matter   @relation(fields: [matterId], references: [id], onDelete: Cascade)
}

model Client {
  id                 String   @id @default(cuid())
  name               String
  type               String
  email              String
  phone              String
  location           String
  responsibleAttorney String
  status             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  bills              Bill[]
}

model Bill {
  id            String    @id @default(cuid())
  clientId      String
  clientName    String
  matterId      String
  matterName    String
  totalCost     Float
  paidAmount    Float     @default(0)
  retainerFee   Float
  retainerDue   DateTime
  unpaidBalance Float
  status        String
  dueDate       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  client        Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  payments      Payment[]
}

model Payment {
  id           String   @id @default(cuid())
  billId       String
  amount       Float
  paymentDate  DateTime
  paymentMethod String
  reference    String?
  notes        String?
  bill         Bill     @relation(fields: [billId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 