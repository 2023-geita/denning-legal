generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String?
  role          UserRole?
  active        Boolean   @default(true)
  emailVerified DateTime?
  image         String?
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  profile       UserProfile?
  accounts      Account[]
  sessions      Session[]
  matters       Matter[]        @relation("AssignedMatters")
  tasks         Task[]         @relation("AssignedTasks")
  notifications Notification[]
  documents     Document[]     @relation("UploadedDocuments")

  @@map("users")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserProfile {
  id            String    @id @default(uuid())
  userId        String    @unique
  phoneNumber   String?
  position      String?
  department    String?
  avatar        String?
  bio           String?
  settings      Json?     @default("{}")
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  data        Json?
  
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Matter model and related models
model Matter {
  id                 String              @id @default(uuid())
  client             String
  status             MatterStatus
  notes              String?
  originatingAttorney String
  responsibleAttorney String
  courtLocation      String
  practiceArea       String
  caseNumber         String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  
  // Relations
  deadlines          MatterDeadline[]
  documents          MatterDocument[]
  subscribedAttorneys SubscribedAttorney[]
  billableSessions   BillableSession[]
  tasks              Task[]
  assignedUsers      User[]            @relation("AssignedMatters")

  @@map("matters")
}

model MatterDeadline {
  id                  String    @id @default(uuid())
  matterId            String
  matterOpens         DateTime
  matterCloses        DateTime
  matterDue           DateTime
  statuteOfLimitations DateTime
  
  matter              Matter    @relation(fields: [matterId], references: [id], onDelete: Cascade)

  @@map("matter_deadlines")
}

model SubscribedAttorney {
  id           String  @id @default(uuid())
  matterId     String
  attorneyName String
  
  matter       Matter  @relation(fields: [matterId], references: [id], onDelete: Cascade)

  @@map("subscribed_attorneys")
}

model MatterDocument {
  id         String   @id @default(uuid())
  matterId   String
  name       String
  url        String
  type       String
  uploadedAt DateTime @default(now())
  
  matter     Matter   @relation(fields: [matterId], references: [id], onDelete: Cascade)

  @@map("matter_documents")
}

// Billable Session model
model BillableSession {
  id          String        @id @default(uuid())
  matterId    String
  matterName  String
  startTime   DateTime
  endTime     DateTime?
  duration    Int          // in minutes
  notes       String?
  attorney    String
  billingRate Float
  date        DateTime
  status      SessionStatus
  billable    Boolean
  
  matter      Matter        @relation(fields: [matterId], references: [id])

  @@map("billable_sessions")
}

// Task model
model Task {
  id              String      @id @default(uuid())
  name            String
  matterId        String
  matterName      String
  description     String?
  dueDate         DateTime
  assignedAttorney String
  status          TaskStatus
  priority        TaskPriority
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  reminder        Boolean
  reminderDate    DateTime?
  
  matter          Matter      @relation(fields: [matterId], references: [id])
  assignedUser    User        @relation("AssignedTasks", fields: [assignedAttorney], references: [id])

  @@map("tasks")
}

// Client model
model Client {
  id                 String      @id @default(uuid())
  name               String
  type               ClientType
  email              String
  phone              String
  location           String
  responsibleAttorney String
  status             ClientStatus
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  
  bills              Bill[]

  @@map("clients")
}

// Document model
model Document {
  id           String           @id @default(uuid())
  name         String
  type         DocumentType
  status       DocumentStatus
  matterId     String
  matterName   String
  uploadedBy   String
  uploadedAt   DateTime         @default(now())
  lastModified DateTime         @updatedAt
  fileUrl      String
  fileSize     Int
  tags         String[]
  
  versions     DocumentVersion[]
  uploader     User             @relation("UploadedDocuments", fields: [uploadedBy], references: [id])

  @@map("documents")
}

model DocumentVersion {
  id         String   @id @default(uuid())
  documentId String
  version    Int
  uploadedBy String
  uploadedAt DateTime @default(now())
  fileUrl    String
  fileSize   Int
  changes    String?
  
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_versions")
}

// Bill model
model Bill {
  id            String      @id @default(uuid())
  clientId      String
  clientName    String
  matterId      String
  matterName    String
  totalCost     Float
  paidAmount    Float       @default(0)
  retainerFee   Float
  retainerDue   DateTime
  unpaidBalance Float
  status        BillStatus
  dueDate       DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  payments      Payment[]
  client        Client      @relation(fields: [clientId], references: [id])

  @@map("bills")
}

model Payment {
  id            String        @id @default(uuid())
  billId        String
  amount        Float
  paymentDate   DateTime
  paymentMethod PaymentMethod
  reference     String
  notes         String?
  
  bill          Bill          @relation(fields: [billId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Enums
enum UserRole {
  ADMIN
  ATTORNEY
  STAFF
}

enum NotificationType {
  MATTER_ASSIGNED
  TASK_DUE
  DOCUMENT_SHARED
  DEADLINE_APPROACHING
  BILL_CREATED
  PAYMENT_RECEIVED
}

enum MatterStatus {
  Open
  Pending
  Closed
}

enum SessionStatus {
  Ongoing
  Completed
  Planned
  Paused
}

enum TaskStatus {
  Pending
  Completed
}

enum TaskPriority {
  Low
  Medium
  High
}

enum ClientType {
  Individual
  Company
}

enum ClientStatus {
  Active
  Inactive
}

enum DocumentType {
  Agreement
  Brief
  Affidavit
  Appeal
  Complaint
  Deed
}

enum DocumentStatus {
  Uploaded
  Drafted
}

enum BillStatus {
  Pending
  Paid
}

enum PaymentMethod {
  Cash
  BankTransfer
  CreditCard
  Check
} 